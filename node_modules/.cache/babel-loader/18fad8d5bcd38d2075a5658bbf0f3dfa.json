{"ast":null,"code":"var _jsxFileName = \"/Users/evik/JavaScript/React-January/typical-page/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Reac from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInfo = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInfo === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 33\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/evik/JavaScript/React-January/typical-page/src/App.js"],"names":["Reac","Login","Home","MainHeader","AuthContext","App","isLoggedIn","setIsLoggedIn","useState","useEffect","storedUserLoggedInfo","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","onLogout"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,OAAjB;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC,KAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA7B;;AACA,QAAIF,oBAAoB,KAAK,GAA7B,EAAkC;AAC9BH,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ,GALQ,EAKN,EALM,CAAT;;AAMA,QAAMM,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACtC;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAT,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GALD;;AAOA,QAAMU,aAAa,GAAG,MAAM;AACxBN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB;AACAX,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;;AAKA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAED,MAAAA,UAAU,EAAEA,UAAd;AAC7Ba,MAAAA,QAAQ,EAAEF;AADmB,KAA7B;AAAA,4BAEI,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,iBACK,CAACX,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEO;AAAhB;AAAA;AAAA;AAAA;AAAA,cADpB,EAEKP,UAAU,iBAAI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAFnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GA9BQD,G;;KAAAA,G;AAgCT,eAAeA,GAAf","sourcesContent":["import Reac from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/store/auth-context\";\n\nfunction App() {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    useEffect(() => {\n        const storedUserLoggedInfo = localStorage.getItem(\"isLoggedIn\");\n        if (storedUserLoggedInfo === \"1\") {\n            setIsLoggedIn(true);\n        }\n    }, []);\n    const loginHandler = (email, password) => {\n        // We should of course check email and password\n        // But it's just a dummy/ demo anyways\n        localStorage.setItem(\"isLoggedIn\", \"1\");\n        setIsLoggedIn(true);\n    };\n\n    const logoutHandler = () => {\n        localStorage.removeItem(\"isLoggedIn\");\n        setIsLoggedIn(false);\n    };\n\n    return (\n        <AuthContext.Provider value={{ isLoggedIn: isLoggedIn,\n        onLogout: logoutHandler }}>\n            <MainHeader onLogout={logoutHandler} />\n            <main>\n                {!isLoggedIn && <Login onLogin={loginHandler} />}\n                {isLoggedIn && <Home/>}\n            </main>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}